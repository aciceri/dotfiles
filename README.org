* My configuration
** Preface
Actually, this file is literate programming: his file i.e.`README.org` can be executed so to generate all the needed configuration files.
In particular, when it's opened with Emacs, pressing `M-x org-babel-tangle` will generate `configuration.nix` and several dotfiles.
All of these files are generated inside specific folders in `dotfiles/`, the nixos configuration will be in `dotfiles/nixos/` and the various
dotfiles, as vim or emacs for example, will be in `dotfiles/vim/` or `dotfiles/emacs/`.

This is the configuration for my home workstation, so it contains the various applications which belongs to my daily workflow.

Since this is literate programming, to generate the dotfiles this file (and the makefile) would be all you need, but I preferred to commit on the repo
also the folder `dotfiles`. In this way one, if I'm on a system without Emacs and I need the dotfile for a specific application, I can simply copy the dotfile.

** Usage
The only requirements for correctly build and install the configuration in this repository are:
- GNU Emacs :: to tangle the various files (thanks to org-mode)
- GNU Stow :: to manage the links
- GNU Make :: to execute the make file
Even if `M-x org-babel-tangle` will build the files inside `dotfiles`, there exist a `makefile` that can be useful as in this way it's not necessary
to open the file with Emacs (but Emacs is obviously still needed!), these are its commands:
- make build :: builds the dotfiles in `dotfiles` using Emacs 


* NixOS configuration
I'm actually using nixos-unstable channel but I think this should work with the default channel too.

** Variables and generic settings
Here I set the variables used in the nixOS configuration file, I also set some environment variables.
#+begin_src nix :tangle configuration.nix :noweb no-export :padline no
{ config, pkgs, lib, ... } :
{
  i18n.consoleFont = "Lat2-Terminus16";
  i18n.consoleKeyMap = "us";
  i18n.defaultLocale = "en_US.UTF-8";
  time.timeZone = "Europe/Rome";
  system.stateVersion = "20.09";
  fonts.fonts = with pkgs; [
    powerline-fonts
    source-code-pro
    nerdfonts
    fira-code
    fira-code-symbols
  ];
#+end_src

** Importing
The only imported nix file is (=/etc/nixos/hardware-configuration.nix=)

#+begin_src nix :tangle configuration.nix :noweb no-export :padline no
imports = [
  ./hardware-configuration.nix
];
#+end_src

It can be automatically generated with

#+begin_src sh
nixos-generate-config
#+end_src

** Booting
I'm not using EFI, things are easy:

#+begin_src nix :tangle configuration.nix :noweb no-export :padline no
boot.loader.grub = {
  enable = true;
  version = 2;
  device = "/dev/sda";
};
#+end_src

** Networking
#+begin_src nix :tangle configuration.nix :noweb no-export :padline no
networking.useDHCP = false;
networking.interfaces.enp1s0.useDHCP = true;
#+end_src

** System packages
Here I declare all the packages I'm using.

#+begin_src nix :tangle configuration.nix :noweb no-export :padline no
nixpkgs.config.allowUnfree = true;
environment.systemPackages = with pkgs; [
  # Editors
  emacs vim

  # Window manager
  sway swaylock swayidle xwayland waybar redshift-wlr termite

  # General
  qutebrowser
  gimp
  spotify
  rawtherapee

  # Programming
  python37 python37Packages.powerline 
  gcc gdb cmake
  guile

  # Cli
  zsh antigen
  tmux
  git
  stow
  cmatrix
  exa
  ranger
  irssi
  p7zip
  wget
  playerctl
  
  xterm 
];
services.xserver.enable = true;
services.xserver.displayManager.startx.enable = true;
#+end_src

*** Zsh
I chose to use antigen to manage plugins, so I need to export in a environment variable the path of
the package in the nixOS store.
#+begin_src nix :tangle configuration.nix :noweb no-export :padline no
environment.variables.ANTIGEN = "${pkgs.antigen}";

#+end_src

*** Powerline
#+begin_src nix :tangle configuration.nix :noweb no-export :padline no
environment.variables.POWERLINE = "${pkgs.python37Packages.powerline}";
#+end_src

** Services
#+begin_src nix :tangle configuration.nix :noweb no-export :padline no
services = {
  openssh = {
    enable = true;
  };
  emacs = {
    enable = true;
  };
};
#+end_src

** Windows manager
#+begin_src nix :tangle configuration.nix :noweb no-export :padline no
programs.sway.enable = true;
#+end_src

** Audio
#+begin_src nix :tangle configuration.nix :noweb no-export :padline no
sound.enable = true;
hardware.pulseaudio.enable = true;
#+end_src

** User settings
There is only an user.

#+begin_src nix :tangle configuration.nix :noweb no-export :padline no
users.users.andrea = {
  isNormalUser = true;
  uid = 1000;
  home = "/home/andrea/";
  shell = "${pkgs.zsh}/bin/zsh";
  extraGroups = [ "wheel" ];
};
#+end_src


#+begin_src nix :tangle configuration.nix :noweb no-export :padline no
}
#+end_src

* Dotfiles
** Termite
I like this emulator because it does its job without frills, furthermore it's wayland native.
It uses a single dotfile setting the colors scheme.

#+begin_src sh :tangle dotfiles/termite/.config/termite/config :noweb no-export :padline no
[colors]
# Base16 Default Dark
# Author: Chris Kempson (http://chriskempson.com)

foreground      = #d8d8d8
foreground_bold = #e8e8e8
cursor          = #e8e8e8
background      = rgba(18, 18, 18, 0.95)

# 16 color space

# Black, Gray, Silver, White
color0  = #181818
color8  = #585858
color7  = #d8d8d8
color15 = #f8f8f8

# Red
color1  = #ab4642
color9  = #ab4642

# Green
color2  = #a1b56c
color10 = #a1b56c

# Yellow
color3  = #f7ca88
color11 = #f7ca88

# Blue
color4  = #7cafc2
color12 = #7cafc2

# Purple
color5  = #ba8baf
color13 = #ba8baf

# Teal
color6  = #86c1b9
color14 = #86c1b9

# Extra colors
color16 = #dc9656
color17 = #a16946
color18 = #282828
color19 = #383838
color20 = #b8b8b8
color21 = #e8e8e8

[options]
font = dejavu sans mono 11
#+end_src

** Zsh

#+begin_src sh :tangle dotfiles/zsh/.zshrc :noweb no-export :padline no
HISTFILE=~/.history
HISTSIZE=1000
SAVEHIST=1000
bindkey -v


#ZSH_THEME="agnoster"
source $ANTIGEN/share/antigen/antigen.zsh
antigen theme denysdovhan/spaceship-prompt
antigen theme spwhitt/nix-zsh-completions
antigen bundle zsh-users/zsh-autosuggestions
antigen bundle zsh-users/zsh-syntax-highlighting
antigen bundle supercrabtree/k
antigen bundle zsh-users/zsh-completions

#source $ZSH/oh-my-zsh.sh
# source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
#powerline-daemon -q
#. /usr/lib/python3.8/site-packages/powerline/bindings/zsh/powerline.zsh

# Aliases
alias ls="exa -l"
alias em="emacsclient -ct"
alias nh="st -f \"Dejavu Sans Mono:pixelsize=20\" -e zsh -c 'echo \"Make this window full screen and press ENTER\"; read; stty columns 80; stty rows 24; asciinema rec -c \"ssh nethack@alt.org\" --title \"Nethack gameplay - $(date)\"'"
alias weather="curl wttr.in/Milan"
alias rr="curl -s -L https://raw.githubusercontent.com/keroserene/rickrollrc/master/roll.sh | bash"
alias pip-upgrade="pip list --user --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U"
alias clean-downloads='sh ~/bin/clean-downloads.sh'

export visual="vim"


SPACESHIP_TIME_SHOW=true
SPACESHIP_USER_SHOW=always
SPACESHIP_HOST_SHOW=always

#eval $(thefuck --alias)
antigen apply
#+end_src

Automatic login is managed in this way:

#+begin_src sh :tangle dotfiles/zsh/.zprofile :noweb no-export :padline no
if [[ -z $DISPLAY ]] && [[ $(tty) = /dev/tty1 ]]; then
  XKB_DEFAULT_LAYOUT=us exec sway
fi
#+end_src

** Emacs
I have splitted my configuration in 2 different files.
I like to keep my customs empty:
#+begin_src emacs-lisp :tangle dotfiles/emacs/.emacs.d/conf/custom.el :noweb no-export :padline no
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+end_src

*** init.el
#+begin_src emacs-lisp :tangle dotfiles/emacs/.emacs.d/init.el :noweb no-export :padline no
(require 'package) ;the first thing to do is to install/update all the packages

(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (when no-ssl
    (warn "\
Your version of Emacs does not support SSL connections,
which is unsafe because it allows man-in-the-middle attacks.
There are two things you can do about this warning:
1. Install an Emacs version that does support SSL and be safe.
2. Remove this warning from your init file so you won't see it again."))
  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
(package-initialize)

;; packages list, change this to add new packages
(setq packages '(spacemacs-theme
		 evil
		 evil-nerd-commenter
		 undo-tree
		 powerline
		 all-the-icons
		 smex
		 company
		 centaur-tabs
		 highlight-indent-guides
		 dashboard
		 magit
		 evil-magit
		 rainbow-delimiters
		 neotree
		 ranger
		 projectile
		 auctex
		 company-auctex
		 company-math
		 elpy
		 flycheck
		 py-autopep8
		 paredit
		 haskell-mode))

;; iter over the packages list and install new packages, doing a refresh before
(setq already-refreshed nil) ; the refresh must be done only one time
(mapcar (lambda (p) (when (not (package-installed-p p))
		      (when (not already-refreshed)
			(package-refresh-contents)
			(setq already-refreshed 't))
		      (package-install p)))
     packages)

;; other config files are inside ~/.emacs.d/conf/, add this path to load-path
(add-to-list 'load-path (expand-file-name "conf" user-emacs-directory))
;; keep the custom variables (added by Custom) inside a different conf/custom.el
(load (expand-file-name "conf/custom.el" user-emacs-directory))

;; put backup files inside a specific directory
(setq backup-directory-alist `(("." . "~/.saves")))
(setq backup-by-copying t)
(setq delete-old-versions t
  kept-new-versions 6
  kept-old-versions 2
  version-control t)

(add-hook 'text-mode-hook 'turn-on-auto-fill)
(setq-default fill-column 100)

(add-hook 'prog-mode-hook #'hs-minor-mode) ; hs-minor-mode is necessary for evil to fold

(require 'appearance)


(require 'server)
(unless (server-running-p)
  (server-start))


(require 'evil)
(evil-mode 1) ; for emacs and vim commands at the same time


(require 'smex) 
(smex-initialize) 
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command) ; old M-x is still available


(require 'centaur-tabs)
(centaur-tabs-mode t)
(global-set-key (kbd "C-<prior>")  'centaur-tabs-backward)
(global-set-key (kbd "C-<next>") 'centaur-tabs-forward)
(setq centaur-tabs-cycle-scope 'tabs) ; cycle through visible tabs (that is, the tabs in the current group)

(require 'powerline)
(powerline-center-evil-theme)


(require 'neotree)
(global-set-key [f8] 'neotree-toggle)


(require 'rainbow-delimiters)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)


(require 'company)
(add-hook 'after-init-hook 'global-company-mode)
(global-set-key (kbd "TAB") 'company-complete)

(require 'undo-tree)
(global-undo-tree-mode 1)
(global-set-key (kbd "C-r") 'undo-tree-redo)


(require 'highlight-indent-guides)
(setq highlight-indent-guides-method 'character)
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)


(require 'projectile)
(projectile-mode +1)


(require 'evil-magit)


(require 'all-the-icons)


(require 'evil-nerd-commenter)
(evilnc-default-hotkeys)


(require 'dashboard)
(dashboard-setup-startup-hook)
(setq dashboard-items '((recents  . 5)
                        (projects . 5)
                        ))
(setq dashboard-set-navigator t)


(require 'paredit)
(mapcar (lambda (mode) (add-hook mode #'enable-paredit-mode))
	'(emacs-lisp-mode-hook
	  eval-expression-minibuffer-setup-hook
	  ielm-mode-hook
	  lisp-mode-hook
	  lisp-interaction-mode-hook
	  scheme-mode-hook
	  ))

(require 'ranger)
(ranger-override-dired-mode t)


;; Python editing configuration
(require 'elpy)
(elpy-enable)
(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))
(require 'py-autopep8)
(add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)


;; LaTeX editing configuration
(defun latex-mode-setup ()
  (setq-local company-backends
              (append '((company-math-symbols-latex company-latex-commands))
                      company-backends)))

(add-hook 'TeX-mode-hook 'latex-mode-setup)
#+end_src

*** appearance.el
#+begin_src emacs-lisp :tangle dotfiles/emacs/.emacs.d/conf/appearance.el :noweb no-export :padline no
(setq inhibit-startup-message t)

(add-to-list 'default-frame-alist '(font . "Source Code Pro-14"))
(set-face-attribute 'default t :font "Source Code Pro-14")

(load-theme 'spacemacs-dark t) 

(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)

(global-display-line-numbers-mode)

(provide 'appearance)
#+end_src

** Vim
I usually use Emacs (with Evil) but sometimes it can be useful to have vim installed, so this configuration is minimal on purpose.

#+begin_src sh :tangle dotfiles/vim/.vimrc :noweb no-export :padline no
set tabstop=4 softtabstop=0 expandtab shiftwidth=4 smarttab
syntax on
:set laststatus=2 "To show the statusline all the time (not only with multiple windows)
:set number
#+end_src

** Tmux

#+begin_src sh :tangle dotfiles/tmux/.tmux.conf :noweb no-export :padline no
source $POWERLINE/share/tmux/powerline.conf
#+end_src

** Sway
*** Sway configuration
#+begin_src sh :tangle dotfiles/sway/.config/sway/config :noweb no-export :padline no
# Use Start key as $mod
set $mod Mod4

# Font for window titles.
font pango:DejaVu Sans Mono 12

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

set $cl_high #009ddc
set $cl_indi #d9d8d8
set $cl_back #231f20
set $cl_fore #d9d8d8
set $cl_urge #ee2e24

# Colors                border   bg       text     indi     childborder
client.focused          $cl_high $cl_high $cl_fore $cl_indi $cl_high
client.focused_inactive $cl_back $cl_back $cl_fore $cl_back $cl_back
client.unfocused        $cl_back $cl_back $cl_fore $cl_back $cl_back
client.urgent           $cl_urge $cl_urge $cl_fore $cl_urge $cl_urge

# Set borders
default_border pixel 1
default_floating_border pixel 1

# Set windows padding, require i3-gaps!
gaps inner 4
gaps outer -4

# workspaces
set $ws1   1:1 
set $ws2   2:2 
set $ws3   3:3 
set $ws4   4:4
set $ws5   5:5
set $ws6   6:6
set $ws7   7:7 
set $ws8   8:8 
set $ws9   9:9 
set $ws10  10:10 

# Window borders
default_border pixel 1
default_floating_border normal
hide_edge_borders smart

smart_gaps on
gaps inner 10

assign [title="Dashboard"] $ws1
assign [class="^qutebrowser$"] $ws2
assign [class="Emacs"] $ws3
assign [class="Telegram"] $ws9
for_window [class="Spotify"] move window to workspace $ws10
assign [title="irssi"] $ws8
assign [title="Transmission"] $ws7

# start a terminal
bindsym $mod+Return exec termite -e "zsh -c 'source ~/.zshrc && tmux'" --title="Termite"
bindsym $mod+t exec termite --title="Termite"
bindsym $mod+p exec grim -g "$(slurp)" /home/andrea/pics/screenshot.png

# kill focused window
bindsym $mod+Shift+q kill

# start dmenu (a program launcher)
bindsym $mod+d exec dmenu_run -fn 'DejaVu Sans Mono-13`'

# change focus
bindsym $mod+j focus left
bindsym $mod+k focus down
bindsym $mod+l focus up
bindsym $mod+semicolon focus right

bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+j move left
bindsym $mod+Shift+k move down
bindsym $mod+Shift+l move up
bindsym $mod+Shift+semicolon move right

bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# Change orientation
bindsym $mod+v split vertical
bindsym $mod+h split horizontal

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# switch to workspace
bindsym $mod+1 workspace $ws1
bindsym $mod+2 workspace $ws2
bindsym $mod+3 workspace $ws3
bindsym $mod+4 workspace $ws4
bindsym $mod+5 workspace $ws5
bindsym $mod+6 workspace $ws6
bindsym $mod+7 workspace $ws7
bindsym $mod+8 workspace $ws8
bindsym $mod+9 workspace $ws9
bindsym $mod+0 workspace $ws10

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace $ws1
bindsym $mod+Shift+2 move container to workspace $ws2
bindsym $mod+Shift+3 move container to workspace $ws3
bindsym $mod+Shift+4 move container to workspace $ws4
bindsym $mod+Shift+5 move container to workspace $ws5
bindsym $mod+Shift+6 move container to workspace $ws6
bindsym $mod+Shift+7 move container to workspace $ws7
bindsym $mod+Shift+8 move container to workspace $ws8
bindsym $mod+Shift+9 move container to workspace $ws9
bindsym $mod+Shift+0 move container to workspace $ws10
# reload the configuration file
bindsym $mod+Shift+c reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart
# exit i3 (logs you out of your X session)
bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -b 'Yes, exit sway' 'swaymsg exit'

bindsym $mod+F3 exec amixer -D pulse sset Master 5%+
bindsym $mod+F2 exec amixer -D pulse sset Master 5%-
bindsym $mod+F4 exec amixer -D pulse sset Master 1+ toggle
bindsym $mod+F8 exec playerctl next
bindsym $mod+F7 exec playerctl play-pause
bindsym $mod+F6 exec playerctl previous
bindsym $mod+F11 exec swaylock -i ~/pics/wallpaper.jpg

bindsym $mod+Prior exec redshift -O 3600
bindsym $mod+Next exec pkill redshift

# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym j resize shrink width 10 px or 10 ppt
        bindsym k resize grow height 10 px or 10 ppt
        bindsym l resize shrink height 10 px or 10 ppt
        bindsym semicolon resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape
        bindsym Return mode "default"
        bindsym Escape mode "default"
}

bindsym $mod+r mode "resize"

# Rules for applications
#for_window [app_id="^floating$"] floating enable # title of the window spawned by qutebrowser

# Extra shotcuts
#bindsym Control+Space exec makoctl dismiss
#bindsym Control+Shift+Space exec makoctl dismiss --all

bindsym $mod+b exec qutebrowser
bindsym $mod+m exec sh ~/bin/spotify.sh

exec_always ~/.config/waybar/waybar.sh
exec --no-startup-id swaybg -i ~/pics/wallpaper.jpg
exec --no-startup-id redshift -O 3600
#exec --no-startup-id nm-applet
exec --no-startup-id emacsclient -c
exec --no-startup-id qutebrowser
exec --no-startup-id 'telegram-desktop --class=telegram'
exec --no-startup-id termite -e "zsh -c /home/andrea/bin/dashboard.sh" --title="Dashboard"
# exec --no-startup-id 'python3 ~/bin/spotify.py'
# exec --no-startup-id 'rclone mount mega:/ ~/mega/'
# exec --no-startup-id 'transmission-gtk'
# exec --no-startup-id termite -e "irssi" --title="irssi"
#+end_src

*** Waybar configuration

Main configuration file.
#+begin_src sh :tangle dotfiles/waybar/.config/waybar/config :noweb no-export :padline no
{
    "layer": "bottom",
    "position": "top",
    "height": 30,

    "modules-left": ["sway/workspaces", "sway/mode"],
    "modules-center": ["sway/window"],
    "modules-right": ["tray", "custom/spotify", "custom/weather", "custom/storage", "pulseaudio", "network", "clock"],
    "sway/mode": {
        "format": " {}"
    },
    "sway/workspaces": {
        "format": "{name}",
        "disable-scroll": false
    },
    "sway/window": {
        "max-length": 80,
        "tooltip": false
    },
    "clock": {
        "format": "{:%a %d %b %H:%M}",
        "tooltip": false
    },
    "network": {
        "interval": 1,
        "format": "{ipaddr} ",
        "format-alt": "{bandwidthDownOctets}  {bandwidthUpOctets} ",
        "format-alt-click": "click-right",
        "format-icons": {
            "wifi": ["", "" ,""],
            "ethernet": [""],
            "disconnected": [""]
        },
    "tooltip": false
    },
    "pulseaudio": {
        "format": "{volume} {icon}",
        "format-alt-click": "click-right",
        "format-muted": "",
        "format-icons": {
            "phone": [" ", " ", " "],
            "default": ["", "", ""]
        },
        "scroll-step": 5,
        "on-click": "None",
        "tooltip": false
    },
    "custom/spotify": {
        "interval": 1,
        "return-type": "json",
        "exec": "modules/spotify.sh",
        "exec-if": "pgrep spotify",
        "escape": true,
        "on-click": "playerctl play-pause"
    },
    "custom/storage": {
        "format": "{} ",
        "format-alt": "{percentage}% ",
        "format-alt-click": "click-right",
        "return-type": "json",
        "interval": 60,
        "exec": "modules/storage.sh"
    },
    "custom/weather": {
        "format": "{}",
        "format-alt": "{alt}: {}",
        "format-alt-click": "click-right",
        "interval": 1800,
        "return-type": "json",
        "exec": "modules/weather.sh Milan",
        "exec-if": "ping wttr.in -c1"
    },
    "tray": {
        "icon-size": 18
    }
}
#+end_src

Script invoked by Sway to execute Waybar.

#+begin_src sh :tangle dotfiles/waybar/.config/waybar/waybar.sh :noweb no-export :padline no
#!/usr/bin/env zsh

# Terminate already running bar instances
pkill waybar

# Wait until the processes have been shut down
while pgrep -x waybar >/dev/null; do sleep 1; done

# Launch main
waybar
#+end_src

Style.

#+begin_src css :tangle dotfiles/waybar/.config/waybar/style.css :noweb no-export :padline no
,* {
    border:        none;
    border-radius: 0;
    font-family:   Sans;
    font-size:     15px;
    box-shadow:    none;
    text-shadow:   none;
    transition-duration: 0s;
}

window {
    color:      rgba(217, 216, 216, 1);
    background: rgba(35, 31, 32, 0.9);
}

window#waybar.solo {
    color:      rgba(217, 216, 216, 1);
    background: rgba(35, 31, 32, 0.9);
}

#workspaces {
    margin: 0 5px;
}

#workspaces button {
    padding:    0 5px;
    color:      rgba(217, 216, 216, 0.4);
}

#workspaces button.visible {
    color:      rgba(217, 216, 216, 1);
}

#workspaces button.focused {
    border-top: 3px solid rgba(217, 216, 216, 1);
    border-bottom: 3px solid rgba(217, 216, 216, 0);
}

#workspaces button.urgent {
    color:      rgba(238, 46, 36, 1);
}

#mode, #battery, #cpu, #memory, #network, #pulseaudio, #idle_inhibitor, #backlight, #custom-storage, #custom-spotify, #custom-weather, #custom-mail {
    margin:     0px 6px 0px 10px;
    min-width:  25px;
}

#clock {
    margin:     0px 16px 0px 10px;
    min-width:  140px;
}

#battery.warning {
   color:       rgba(255, 210, 4, 1);
}

#battery.critical {
    color:      rgba(238, 46, 36, 1);
}

#battery.charging {
    color:      rgba(217, 216, 216, 1);
}

#custom-storage.warning {
    color:      rgba(255, 210, 4, 1);
}

#custom-storage.critical {
    color:      rgba(238, 46, 36, 1);
}
#+end_src

**** Modules
Storage

#+begin_src sh :tangle dotfiles/waybar/.config/waybar/modules/storage.sh :noweb no-export :padline no
#!/bin/sh

mount="/"
warning=20
critical=10

df -h -P -l "$mount" | awk -v warning=$warning -v critical=$critical '
/\/.*/ {
  text=$4
  tooltip="Filesystem: "$1"\rSize: "$2"\rUsed: "$3"\rAvail: "$4"\rUse%: "$5"\rMounted on: "$6
  use=$5
  exit 0
}
END {
  class=""
  gsub(/%$/,"",use)
  if ((100 - use) < critical) {
    class="critical"
  } else if ((100 - use) < warning) {
    class="warning"
  }
  print "{\"text\":\""text"\", \"percentage\":"use",\"tooltip\":\""tooltip"\", \"class\":\""class"\"}"
}
'
#+end_src

Spotify

#+begin_src sh :tangle dotfiles/waybar/.config/waybar/modules/spotify.sh :noweb no-export :padline no
#!/bin/sh

class=$(playerctl metadata --player=spotify --format '{{lc(status)}}')
icon=""

if [[ $class == "playing" ]]; then
  info=$(playerctl metadata --player=spotify --format '{{artist}} - {{title}}')
  if [[ ${#info} > 40 ]]; then
    info=$(echo $info | cut -c1-40)"..."
  fi
  text=$info" "$icon
elif [[ $class == "paused" ]]; then
  text=$icon
elif [[ $class == "stopped" ]]; then
  text=""
fi

echo -e "{\"text\":\""$text"\", \"class\":\""$class"\"}"
#+end_src

Weather

#+begin_src sh :tangle dotfiles/waybar/.config/waybar/modules/weather.sh :noweb no-export :padline no
#!/bin/bash

cachedir=~/.cache/rbn
cachefile=${0##*/}-$1

if [ ! -d $cachedir ]; then
    mkdir -p $cachedir
fi

if [ ! -f $cachedir/$cachefile ]; then
    touch $cachedir/$cachefile
fi

# Save current IFS
SAVEIFS=$IFS
# Change IFS to new line.
IFS=$'\n'

cacheage=$(($(date +%s) - $(stat -c '%Y' "$cachedir/$cachefile")))
if [ $cacheage -gt 1740 ] || [ ! -s $cachedir/$cachefile ]; then
    data=($(curl -s https://en.wttr.in/$1\?0qnT 2>&1))
    echo ${data[0]} | cut -f1 -d, > $cachedir/$cachefile
    echo ${data[1]} | sed -E 's/^.{15}//' >> $cachedir/$cachefile
    echo ${data[2]} | sed -E 's/^.{15}//' >> $cachedir/$cachefile
fi

weather=($(cat $cachedir/$cachefile))

# Restore IFSClear
IFS=$SAVEIFS

temperature=$(echo ${weather[2]} | sed -E 's/[0-9]*\.\.//g')

#echo ${weather[1]##*,}

# https://fontawesome.com/icons?s=solid&c=weather
case $(echo ${weather[1]##*,} | tr '[:upper:]' '[:lower:]') in
"clear" | "sunny")
    condition=""
    ;;
"partly cloudy")
    condition=""
    ;;
"cloudy")
    condition=""
    ;;
"overcast")
    condition=""
    ;;
"mist" | "fog" | "freezing fog")
    condition=""
    ;;
"patchy rain possible" | "patchy light drizzle" | "light drizzle" | "patchy light rain" | "light rain" | "light rain shower" | "rain")
    condition=""
    ;;
"moderate rain at times" | "moderate rain" | "heavy rain at times" | "heavy rain" | "moderate or heavy rain shower" | "torrential rain shower" | "rain shower")
    condition=""
    ;;
"patchy snow possible" | "patchy sleet possible" | "patchy freezing drizzle possible" | "freezing drizzle" | "heavy freezing drizzle" | "light freezing rain" | "moderate or heavy freezing rain" | "light sleet" | "ice pellets" | "light sleet showers" | "moderate or heavy sleet showers")
    condition=""
    ;;
"blowing snow" | "moderate or heavy sleet" | "patchy light snow" | "light snow" | "light snow showers")
    condition=""
    ;;
"blizzard" | "patchy moderate snow" | "moderate snow" | "patchy heavy snow" | "heavy snow" | "moderate or heavy snow with thunder" | "moderate or heavy snow showers")
    condition=""
    ;;
"thundery outbreaks possible" | "patchy light rain with thunder" | "moderate or heavy rain with thunder" | "patchy light snow with thunder")
    condition=""
    ;;
*)
    condition=""
    echo -e "{\"text\":\""$condition"\", \"alt\":\""${weather[0]}"\", \"tooltip\":\""${weather[0]}: $temperature ${weather[1]}"\"}"
    ;;
esac

#echo $temp $condition

echo -e "{\"text\":\""$temperature $condition"\", \"alt\":\""${weather[0]}"\", \"tooltip\":\""${weather[0]}: $temperature ${weather[1]}"\"}"
#+end_src
